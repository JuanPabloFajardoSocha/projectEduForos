// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eduForos.Infrastructure.Context;

#nullable disable

namespace eduForos.Infrastructure.Migrations
{
    [DbContext(typeof(EduForosDbContext))]
    partial class EduForosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eduForos.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAnswer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnswer"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("IdMessage")
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("idUser");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("message");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("route");

                    b.HasKey("IdAnswer");

                    b.HasIndex("IdMessage");

                    b.HasIndex("IdUser");

                    b.ToTable("answer", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Course", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourse"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("date")
                        .HasColumnName("update_at");

                    b.HasKey("IdCourse");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.CourseSubject", b =>
                {
                    b.Property<int>("IdCourseSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCourseSubject");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseSubject"));

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("idSubject");

                    b.HasKey("IdCourseSubject");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdSubject");

                    b.ToTable("courseSubject", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Forum", b =>
                {
                    b.Property<int>("IdForum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idForum");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdForum"));

                    b.Property<string>("AssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("idSubject");

                    b.Property<int>("IsGradable")
                        .HasColumnType("int")
                        .HasColumnName("isGradable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("date")
                        .HasColumnName("update_at");

                    b.Property<string>("UrlPhoto")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("UrlPhoto");

                    b.HasKey("IdForum");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdSubject");

                    b.ToTable("forum", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"));

                    b.Property<string>("AssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Calification")
                        .HasColumnType("int")
                        .HasColumnName("calification");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdForum")
                        .HasColumnType("int")
                        .HasColumnName("idForum");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("idUser");

                    b.Property<string>("Message1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("message");

                    b.Property<string>("Route")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("route");

                    b.HasKey("IdMessage");

                    b.HasIndex("IdForum");

                    b.HasIndex("IdUser");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("IdSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSubject");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubject"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("create_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("date")
                        .HasColumnName("update_at");

                    b.HasKey("IdSubject");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("idUser");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("age");

                    b.Property<string>("AssetId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("AssetId");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("create_at");

                    b.Property<string>("FirtsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firtsName");

                    b.Property<string>("InstitutionalEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("institutionalEmail");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("personalEmail");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("profession");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("surName");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telephone");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("date")
                        .HasColumnName("update_at");

                    b.Property<string>("UrlPhoto")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("UrlPhoto");

                    b.Property<string>("UserDocument")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userDocument");

                    b.Property<string>("UserDocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userDocumentType");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userType");

                    b.HasKey("IdUser")
                        .HasName("PK_user_1");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.UserCourse", b =>
                {
                    b.Property<int>("IdUserCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUserCourse");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserCourse"));

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("idUser");

                    b.HasKey("IdUserCourse");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdUser");

                    b.ToTable("userCourse", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.UserSubject", b =>
                {
                    b.Property<int>("IdUserSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUserSubject");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserSubject"));

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("idSubject");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("idUser");

                    b.HasKey("IdUserSubject");

                    b.HasIndex("IdSubject");

                    b.HasIndex("IdUser");

                    b.ToTable("userSubject", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.VideoConference", b =>
                {
                    b.Property<int>("IdVideoConference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVideoConference");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVideoConference"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int")
                        .HasColumnName("idCourse");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int")
                        .HasColumnName("idSubject");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("date")
                        .HasColumnName("update_at");

                    b.HasKey("IdVideoConference");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdSubject");

                    b.ToTable("videoConference", (string)null);
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Answer", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Message", "IdMessageNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdMessage")
                        .HasConstraintName("FK_answer_message");

                    b.HasOne("eduForos.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_answer_user");

                    b.Navigation("IdMessageNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.CourseSubject", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Course", "IdCourseNavigation")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("IdCourse")
                        .IsRequired()
                        .HasConstraintName("FK_courseSubject_course");

                    b.HasOne("eduForos.Domain.Entities.Subject", "IdSubjectNavigation")
                        .WithMany("CourseSubjects")
                        .HasForeignKey("IdSubject")
                        .IsRequired()
                        .HasConstraintName("FK_courseSubject_subject");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("IdSubjectNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Forum", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Course", "IdCourseNavigation")
                        .WithMany("Forums")
                        .HasForeignKey("IdCourse")
                        .IsRequired()
                        .HasConstraintName("FK_forum_course");

                    b.HasOne("eduForos.Domain.Entities.Subject", "IdSubjectNavigation")
                        .WithMany("Forums")
                        .HasForeignKey("IdSubject")
                        .IsRequired()
                        .HasConstraintName("FK_forum_subject");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("IdSubjectNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Message", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Forum", "IdForumNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("IdForum")
                        .IsRequired()
                        .HasConstraintName("FK_message_forum");

                    b.HasOne("eduForos.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_message_user");

                    b.Navigation("IdForumNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.UserCourse", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Course", "IdCourseNavigation")
                        .WithMany("UserCourses")
                        .HasForeignKey("IdCourse")
                        .IsRequired()
                        .HasConstraintName("FK_userCourse_course");

                    b.HasOne("eduForos.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("UserCourses")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_userCourse_user");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.UserSubject", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Subject", "IdSubjectNavigation")
                        .WithMany("UserSubjects")
                        .HasForeignKey("IdSubject")
                        .IsRequired()
                        .HasConstraintName("FK_userSubject_subject");

                    b.HasOne("eduForos.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("UserSubjects")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_userSubject_user");

                    b.Navigation("IdSubjectNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.VideoConference", b =>
                {
                    b.HasOne("eduForos.Domain.Entities.Course", "IdCourseNavigation")
                        .WithMany("VideoConferences")
                        .HasForeignKey("IdCourse")
                        .IsRequired()
                        .HasConstraintName("FK_videoConference_course");

                    b.HasOne("eduForos.Domain.Entities.Subject", "IdSubjectNavigation")
                        .WithMany("VideoConferences")
                        .HasForeignKey("IdSubject")
                        .IsRequired()
                        .HasConstraintName("FK_videoConference_subject");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("IdSubjectNavigation");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseSubjects");

                    b.Navigation("Forums");

                    b.Navigation("UserCourses");

                    b.Navigation("VideoConferences");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Forum", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Message", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.Subject", b =>
                {
                    b.Navigation("CourseSubjects");

                    b.Navigation("Forums");

                    b.Navigation("UserSubjects");

                    b.Navigation("VideoConferences");
                });

            modelBuilder.Entity("eduForos.Domain.Entities.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Messages");

                    b.Navigation("UserCourses");

                    b.Navigation("UserSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
